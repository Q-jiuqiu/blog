(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{376:function(e,t,o){"use strict";o.r(t);var l=o(42),i=Object(l.a)({},(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h1",{attrs:{id:"vue实例"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#vue实例"}},[e._v("#")]),e._v(" Vue实例")]),e._v(" "),o("h2",{attrs:{id:"vue采用了mvvm模型"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#vue采用了mvvm模型"}},[e._v("#")]),e._v(" vue采用了MVVM模型")]),e._v(" "),o("p",[o("strong",[e._v("MVVM")]),e._v("是Model-View-ViewModel的缩写，它是一种基于前端开发的架构模式，其核心是提供对View 和 ViewModel 的双向数据绑定，这使得ViewModel 的状态改变可以自动传递给 View，即所谓的数据双向绑定。")]),e._v(" "),o("p",[e._v("Model层表示数据模型，可以在Model中定义数据修改和操作的业务逻辑；View代表UI组件，负责将数据模型转化成UI展示出来；ViewModel是一个同步View和Model的一个对象。")]),e._v(" "),o("p",[o("font",{attrs:{color:"red"}},[e._v("在MVVM框架下，View和Model之间没有直接联系，而是通过ViewModel进行交互的，Model和ViewModel之间的交互是双向的，因此View 数据的变化会同步到Model中，而Model 数据的变化也会立即反应到View 上。")])],1),e._v(" "),o("img",{attrs:{src:e.$withBase("/image//vue/MVVM.jpg"),alt:"MVVM模型"}})])}),[],!1,null,null,null);t.default=i.exports}}]);